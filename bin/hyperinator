#!/usr/bin/env node
const {readFileSync} = require('fs')
const {homedir} = require('os')
const {resolve} = require('path')
const vm = require('vm')
const yaml = require('js-yaml')
const debug = require('debug')('hyperinator')

const env = process.env

// Check if user has hyperinator plugin installed
const isPluginInstalled = (configPath) => {
  try {
    const hyperConfig = readFileSync(configPath, 'utf8')
    const script = new vm.Script(hyperConfig)
    const module = {}
    script.runInNewContext({module})
    const {plugins, localPlugins} = module.exports
    const pluginArray = plugins.concat(localPlugins)
    return pluginArray.includes('hyperinator')
  } catch (err) {
    debug(err)
    return false
  }
}


function start() {
  if (env.TERM_PROGRAM !== 'Hyper' && env.TERM_PROGRAM !== 'HyperTerm' && !env.HYPERINATOR) {
    console.error('You need to use Hyper.app to run this command')
    return
  }

  const hyperCfgDir = process.platform === 'win32' ? resolve(env.APPDATA, 'Hyper') : homedir();
  const hyperCfgPath = resolve(hyperCfgDir, '.hyper.js')
  if (!isPluginInstalled(hyperCfgPath) && !env.HYPERINATOR) {
    console.error(`Can't find hyperinator plugin in ${hyperCfgPath}`)
    return
  }

  if (process.argv.length <= 2) {
    console.error('You must specify a command')
    return
  }

  switch (process.argv[2]) {
    case 'load':
      if (process.argv.length !== 4) {
        console.error('Load command error!')
        return
      }
      cfgPath = resolve(homedir(), '.hyperinator', `${process.argv[3]}.yml`)
      try {
        cfgData = readFileSync(cfgPath, 'utf8')
      } catch (err) {
        console.error(`Can't find file : ${cfgPath}`)
        return
      }
      try {
        yaml.load(cfgData)
      } catch (err) {
        console.error(`Can't parse file : ${cfgPath}`)
        console.error(err)
        return
      }
      setTimeout(() => {
        console.log(`[hyperinator config: ${cfgPath}]`)
      }, 100)
      break
    default:
      console.error('Unknown command!')
  }
}

start()
